'use client'

import React from 'react'
import { useState, useEffect, useMemo, useRef } from 'react'

type BlockKeys = 'one_liner'|'why'|'ack'|'short_script'|'full_script'|'math'|'next_step'
type Blocks = Partial<Record<BlockKeys,string>>

type Company = { id:string, name:string }
type Profile = { id?:string, name:string, json?:any }

const L = {
  sv: {
    title: 'Q&A',
    sv: 'SV', en: 'EN',
    company: 'Företag', company_ph: 'Välj företag…',
    profile: 'Profil', profile_ph: 'Välj profil…',
    goal: 'Mål (valfritt)',
    segment: 'Segment (valfritt)',
    channel: 'Kanal (valfritt)',
    value: 'Värderad rad (valfritt)',
    value_ph: 'Exempel: sänk din elräkning upp till 30 % per månad',
    address: 'Adress (valfritt)',
    address_ph: 'Exempel: Södra Förstadsgatan 1, Malmö',
    q: 'Fråga / Signal',
    q_ph: 'Hur hanterar jag ”jag har inte tid”?',
    ask: 'Hämta svar',
    copied: 'Kopierat'
  },
  en: {
    title: 'Q&A',
    sv: 'SV', en: 'EN',
    company: 'Company', company_ph: 'Choose company…',
    profile: 'Profile', profile_ph: 'Choose profile…',
    goal: 'Goal (optional)',
    segment: 'Segment (optional)',
    channel: 'Channel (optional)',
    value: 'Value line (optional)',
    value_ph: 'Example: reduce your electricity bill up to 30 percent per month',
    address: 'Address (optional)',
    address_ph: 'Example: 1 Södra Förstadsgatan, Malmö',
    q: 'Question / Signal',
    q_ph: 'How do I handle “I don’t have time”?',
    ask: 'Get answers',
    copied: 'Copied'
  }
}

export default function QA(){
  const [lang,setLang] = useState<'sv'|'en'>('sv')

  // Inputs (order REQUIRED by you)
  const [companyId, setCompanyId] = useState<string>('')
  const [profileName, setProfileName] = useState<string>('')  // free text / selector
  const [goal, setGoal] = useState<string>('')
  const [segment, setSegment] = useState<string>('')
  const [channel, setChannel] = useState<string>('')
  const [numbers, setNumbers] = useState<string>('')  // “värderad rad”
  const [address, setAddress] = useState<string>('')
  const [question, setQuestion] = useState<string>('')

  // Lists
  const [companies,setCompanies] = useState<Company[]>([])
  const [profiles,setProfiles] = useState<Profile[]>([])

  // Results
  const [blocks,setBlocks] = useState<Blocks>({})
  const [loading,setLoading] = useState(false)
  const [error,setError] = useState<string>('')

  const t = useMemo(()=> L[lang], [lang])
  const qRef = useRef<HTMLTextAreaElement|null>(null)

  // Load companies (graceful empty)
  useEffect(()=>{
    fetch('/api/admin/company/list')
      .then(r=>r.ok?r.json():{companies:[]})
      .then(j=> setCompanies(Array.isArray(j?.companies)?j.companies:[]))
      .catch(()=> setCompanies([]))
  },[])

  // Load profiles (simple local presets; swap to your source if you have one)
  useEffect(()=>{
    setProfiles([
      { name: 'Mötesbokare', json: {
          Tone: 'Varm, konkret, mänsklig',
          Goals: ['Mötesbokning','Prospektering','Kvalificera','Avslut'],
          CallbackWindows: '12:15, 16:40',
          Language: lang==='en'?'English':'Svenska'
        }
      }
    ])
  },[lang])

  // Auto focus Q
  useEffect(()=>{ qRef.current?.focus() },[])

  const onEnterAsk = (e:React.KeyboardEvent<HTMLTextAreaElement>)=>{
    if(e.key==='Enter' && !e.shiftKey){
      e.preventDefault()
      ask()
    }
  }

  const selectedProfileJson = useMemo(()=>{
    const p = profiles.find(p=>p.name===profileName)
    return p?.json || {}
  },[profiles,profileName])

  async function ask(){
    try{
      setLoading(true); setError(''); setBlocks({})
      const payload = {
        profile: profileName,
        question,
        goal, segment, channel,
        numbers,
        extra: { address, companyId },
        profileJson: selectedProfileJson,
        userProfile: {},          // (hook up later if you store user prefs)
        kbItems: []               // (hook up later to your KB API for RAG-light)
      }
      const r = await fetch('/api/qa/ask', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify(payload)
      })
      const j = await r.json()
      if(!r.ok || !j?.ok) throw new Error(j?.error || 'API error')
      setBlocks(j.blocks||{})
    }catch(e:any){
      setError(e?.message||String(e))
    }finally{
      setLoading(false)
    }
  }

  const copyBlock = async (k:BlockKeys)=>{
    try{
      const txt = (blocks[k]||'').trim()
      if(!txt) return
      await navigator.clipboard.writeText(txt)
      // simple toast
      const el = document.createElement('div')
      el.textContent = t.copied
      el.className = 'fixed bottom-4 left-1/2 -translate-x-1/2 bg-blue-600 hover:bg-blue-700
      document.body.appendChild(el)
      setTimeout(()=> el.remove(), 1000)
    }catch{}
  }

  const Field = ({label, children}:{label:string, children:any})=>(
    <label className="block space-y-1">
      <div className="text-sm text-slate-700">{label}</div>
      {children}
    </label>
  )

  return (
    <div className="mx-auto max-w-4xl p-4 space-y-5">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">{t.title}</h1>
        <div className="flex gap-2">
          <button onClick={()=>setLang('sv')} className={`px-2 py-1 rounded border ${lang==='sv'?'bg-slate-900 text-white':''}`}>{t.sv}</button>
          <button onClick={()=>setLang('en')} className={`px-2 py-1 rounded border ${lang==='en'?'bg-slate-900 text-white':''}`}>{t.en}</button>
        </div>
      </div>

      {/* ORDER you requested */}
      <div className="grid md:grid-cols-2 gap-4">
        <Field label={t.company}>
          <select value={companyId} onChange={e=>setCompanyId(e.target.value)} className="w-full border rounded px-3 py-2">
            <option value="">{t.company_ph}</option>
            {companies.map(c=> <option key={c.id} value={c.id}>{c.name}</option>)}
          </select>
        </Field>

        <Field label={t.profile}>
          <input
            value={profileName}
            onChange={e=>setProfileName(e.target.value)}
            list="profiles"
            placeholder={t.profile_ph}
            className="w-full border rounded px-3 py-2"
          />
          <datalist id="profiles">
            {profiles.map(p=> <option key={p.name} value={p.name} />)}
          </datalist>
        </Field>

        <Field label={t.goal}>
          <select value={goal} onChange={e=>setGoal(e.target.value)} className="w-full border rounded px-3 py-2">
            <option value="">{/* optional */}</option>
            <option value={lang==='en'?'Qualify':'Kvalificera'}>{lang==='en'?'Qualify':'Kvalificera'}</option>
            <option value={lang==='en'?'Book call/time later':'Boka samtal/tid senare'}>{lang==='en'?'Book call/time later':'Boka samtal/tid senare'}</option>
            <option value={lang==='en'?'Sale':'Sälj'}>{lang==='en'?'Sale':'Sälj'}</option>
          </select>
        </Field>

        <Field label={t.segment}>
          <select value={segment} onChange={e=>setSegment(e.target.value)} className="w-full border rounded px-3 py-2">
            <option value=""></option>
            <option value={lang==='en'?'Single household':'Enpersonshushåll'}>{lang==='en'?'Single household':'Enpersonshushåll'}</option>
            <option value={lang==='en'?'Two-person household':'Tvåpersonshushåll'}>{lang==='en'?'Two-person household':'Tvåpersonshushåll'}</option>
            <option value={lang==='en'?'Family household':'Familjehushåll'}>{lang==='en'?'Family household':'Familjehushåll'}</option>
          </select>
        </Field>

        <Field label={t.channel}>
          <select value={channel} onChange={e=>setChannel(e.target.value)} className="w-full border rounded px-3 py-2">
            <option value=""></option>
            <option value="Telefon">{lang==='en'?'Phone':'Telefon'}</option>
            <option value="SMS">SMS</option>
            <option value="Email">Email</option>
          </select>
        </Field>

        <Field label={t.value}>
          <input
            value={numbers}
            onChange={e=>setNumbers(e.target.value)}
            placeholder={t.value_ph}
            className="w-full border rounded px-3 py-2"
          />
        </Field>

        <Field label={t.address}>
          <input
            value={address}
            onChange={e=>setAddress(e.target.value)}
            placeholder={t.address_ph}
            className="w-full border rounded px-3 py-2"
          />
        </Field>

        <Field label={t.q}>
          <textarea
            ref={qRef}
            value={question}
            onChange={e=>setQuestion(e.target.value)}
            onKeyDown={onEnterAsk}
            placeholder={t.q_ph}
            className="w-full border rounded px-3 py-2 h-[94px]"
          />
        </Field>
      </div>

      <div className="flex justify-center">
        <button
          onClick={ask}
          
          className="bg-[var(--brand,#111827)] text-white rounded px-5 py-2 disabled:opacity-50"
        >
          {loading ? '…' : t.ask}
        </button>
      </div>

      {error && <div className="text-red-600 text-sm">{error}</div>}

      {/* Answers */}
      { (blocks.one_liner || blocks.short_script || blocks.full_script) && (
        <div className="grid md:grid-cols-2 gap-4">
          {([
            ['one_liner','One-liner'],
            ['why','Why'],
            ['ack','Acknowledge'],
            ['short_script','Short Script'],
            ['full_script','Full Script'],
            ['math','Math'],
            ['next_step','Next Step'],
          ] as [BlockKeys,string][]).map(([k,label])=>(
            blocks[k] ? (
              <div key={k} className="border rounded p-3 bg-slate-50">
                <div className="flex items-center justify-between gap-2 mb-2">
                  <div className="text-sm text-slate-600">{label}</div>
                  <div className="flex gap-2">
                    <button onClick={()=>copyBlock(k)} className="text-xs border rounded px-2 py-1">📋 Kopiera</button>
                    <button className="text-xs border rounded px-2 py-1">👍 Gilla</button>
                    <button className="text-xs border rounded px-2 py-1">👎 Ogilla</button>
                  </div>
                </div>
                <div className="whitespace-pre-wrap text-sm">{blocks[k]}</div>
                <div className="mt-2 text-amber-500 text-lg select-none" role="radiogroup" aria-label="rating">
                  {'★★★★★'.split('').map((star,i)=><span key={i}>★</span>)}
                </div>
              </div>
            ) : null
          ))}
        </div>
      )}
    </div>
  )
}

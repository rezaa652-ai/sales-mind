/**
 * Generate data/kommuner.ts from SCB codelists.
 * - Tries v2beta codelist first
 * - Falls back to PXWeb v1 table metadata (Region variable)
 * - Final output: export const KOMMUNER = [{ code, name_sv }]
 */
const fs = require('fs');
const path = require('path');
const https = require('https');

function fetchJSON(url, headers={}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, { method: 'GET', headers: { 'Accept': 'application/json', 'User-Agent': 'pxweb-client', ...headers } }, res => {
      let data = '';
      res.on('data', d => data += d);
      res.on('end', () => {
        const ct = res.headers['content-type'] || '';
        if (!ct.toLowerCase().includes('application/json')) {
          return reject(new Error(`Not JSON from ${url}. content-type=${ct}. preview=${data.slice(0,200)}`));
        }
        try {
          resolve(JSON.parse(data));
        } catch (e) {
          reject(new Error(`JSON parse error from ${url}: ${e.message}. preview=${data.slice(0,200)}`));
        }
      });
    });
    req.on('error', reject);
    req.end();
  });
}

async function tryV2Beta() {
  // Known codelist id for municipalities (kommun) without aggregates
  // SCB v2beta path pattern for codelists:
  //   /ov0104/v2beta/api/v2/codelists/<codelistId>/values?lang=sv
  const url = 'https://api.scb.se/ov0104/v2beta/api/v2/codelists/vs_RegionKommun07EjAggr/values?lang=sv';
  const j = await fetchJSON(url);
  // Expect { values: [{ code: '1280', text: 'Malmö' }, ...] } or similar
  const values = (j.values || j || []).map(v => {
    const code = v.code || v.id || v.value || '';
    const text = v.text || v.label || v.name || '';
    return { code, name_sv: text };
  }).filter(x => x.code && x.name_sv);
  if (!values.length) throw new Error('v2beta returned empty values');
  return values;
}

async function tryPXWebV1() {
  // PXWeb v1: read variables from the disposable income table, pick Region variable
  // Trailing slash matters
  const url = 'https://api.scb.se/OV0104/v1/doris/sv/ssd/START__HE__HE0110__HE0110G/Tab4bDispInkN/';
  const j = await fetchJSON(url);
  // Expect { variables: [ { code: 'Region', values: [...], valueTexts: [...] }, ... ] }
  const regionVar = (j.variables || []).find(v => v.code === 'Region');
  if (!regionVar) throw new Error('PXWeb v1: Region variable not found');
  const codes = regionVar.values || [];
  const names = regionVar.valueTexts || [];
  const out = [];
  for (let i = 0; i < Math.min(codes.length, names.length); i++) {
    out.push({ code: codes[i], name_sv: names[i] });
  }
  if (!out.length) throw new Error('PXWeb v1 produced 0 kommuner');
  // Filter out aggregates if any slipped in (codes are 4-digit for kommuner)
  return out.filter(k => /^\d{4}$/.test(k.code));
}

function writeFile(rows) {
  // Sort by code for consistency
  rows.sort((a,b)=> a.code.localeCompare(b.code));
  const content =
`// Auto-generated by scripts/build-kommuner.js
// Swedish municipalities (kommuner) — code + Swedish name
export interface Kommun { code: string; name_sv: string; }

export const KOMMUNER: Kommun[] = ${JSON.stringify(rows, null, 2)};
`;
  const outDir = path.join(process.cwd(), 'data');
  const outFile = path.join(outDir, 'kommuner.ts');
  fs.mkdirSync(outDir, { recursive: true });
  fs.writeFileSync(outFile, content, 'utf8');
  console.log(`Wrote ${rows.length} kommuner -> ${path.relative(process.cwd(), outFile)}`);
}

(async () => {
  try {
    let rows = [];
    try {
      console.log('Trying SCB v2beta codelist…');
      rows = await tryV2Beta();
    } catch (e1) {
      console.warn('v2beta failed:', e1.message);
      console.log('Trying PXWeb v1 variables…');
      rows = await tryPXWebV1();
    }
    if (!rows.length) throw new Error('No kommuner fetched.');
    writeFile(rows);
  } catch (e) {
    console.error('Failed to build kommuner list:', e.message);
    // Fallback minimal list so app still runs; replace later
    const fallback = [
      { code: '0114', name_sv: 'Upplands Väsby' },
      { code: '0180', name_sv: 'Stockholms stad' },
      { code: '1280', name_sv: 'Malmö' },
      { code: '1480', name_sv: 'Göteborg' },
      { code: '1980', name_sv: 'Uppsala' },
    ];
    writeFile(fallback);
    process.exitCode = 1;
  }
})();

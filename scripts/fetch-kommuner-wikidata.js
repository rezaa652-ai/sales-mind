/**
 * Fetch all Swedish municipalities (kommuner) from Wikidata with their Swedish names
 * and Swedish municipal code (kommunkod, property P525), then write data/kommuner.ts
 *
 * Output shape:
 *   export const KOMMUNER = [
 *     { code: "0114", name_sv: "Upplands Väsby", name_en: "Upplands Väsby" },
 *     ...
 *   ] as const;
 *
 * We include English label fallback (Wikidata has en labels for most).
 */

import fs from "node:fs";
import path from "node:path";

const SPARQL = `
SELECT ?code ?name_sv ?name_en WHERE {
  ?item wdt:P31 wd:Q15284 .        # instance of: municipality of Sweden
  ?item wdt:P525 ?code .           # Swedish municipal code
  OPTIONAL { ?item rdfs:label ?name_sv FILTER (lang(?name_sv) = "sv") }
  OPTIONAL { ?item rdfs:label ?name_en FILTER (lang(?name_en) = "en") }
}
ORDER BY ?code
`;

const ENDPOINT = "https://query.wikidata.org/sparql";
const HEADERS = {
  "Accept": "application/sparql-results+json",
  "User-Agent": "sales-mind-kommunkod-fetch/1.0 (contact: yourapp@example.com)"
};

async function main() {
  const url = new URL(ENDPOINT);
  url.searchParams.set("query", SPARQL);

  const resp = await fetch(url, { headers: HEADERS });
  if (!resp.ok) {
    const t = await resp.text().catch(() => "");
    throw new Error(`Wikidata SPARQL HTTP ${resp.status}: ${t.slice(0,200)}`);
  }
  const json = await resp.json();
  const rows = json?.results?.bindings || [];

  if (!Array.isArray(rows) || rows.length < 200) {
    throw new Error(`Unexpected result size: got ${rows.length} rows (expected ~290).`);
  }

  const items = rows.map(r => {
    const codeRaw = r.code?.value?.trim() || "";
    // Normalize to 4-digit zero-padded string (e.g. "114" -> "0114")
    const code = codeRaw.padStart(4, "0");
    const name_sv = (r.name_sv?.value || "").trim();
    const name_en = (r.name_en?.value || "").trim() || name_sv;
    return { code, name_sv, name_en };
  });

  // Deduplicate by code just in case
  const seen = new Set();
  const unique = items.filter(it => {
    if (seen.has(it.code)) return false;
    seen.add(it.code);
    return true;
  });

  // Sort by code ascending
  unique.sort((a, b) => a.code.localeCompare(b.code, "sv"));

  // Write TS file
  const outDir = path.resolve("data");
  const outFile = path.join(outDir, "kommuner.ts");
  await fs.promises.mkdir(outDir, { recursive: true });

  const ts = `// Auto-generated by scripts/fetch-kommuner-wikidata.js
// Source: Wikidata SPARQL (P525 kommunkod, Q15284 municipality of Sweden)
export const KOMMUNER = [
${unique.map(it => `  { code: "${it.code}", name_sv: ${JSON.stringify(it.name_sv)}, name_en: ${JSON.stringify(it.name_en)} }`).join(",\n")}
] as const;

export type Kommun = typeof KOMMUNER[number];
`;

  await fs.promises.writeFile(outFile, ts, "utf8");
  console.log(`Wrote ${unique.length} kommuner -> ${outFile}`);
}

main().catch(err => {
  console.error("Failed to fetch kommuner:", err.message);
  process.exit(1);
});

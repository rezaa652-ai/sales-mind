const fs = require("node:fs");
const path = require("node:path");

const SPARQL = `
SELECT ?code ?name_sv ?name_en WHERE {
  ?item wdt:P31 wd:Q15284 .
  ?item wdt:P525 ?code .
  OPTIONAL { ?item rdfs:label ?name_sv FILTER (lang(?name_sv) = "sv") }
  OPTIONAL { ?item rdfs:label ?name_en FILTER (lang(?name_en) = "en") }
}
ORDER BY ?code
`;

const ENDPOINT = "https://query.wikidata.org/sparql";
const HEADERS = {
  "Accept": "application/sparql-results+json",
  "User-Agent": "sales-mind-kommunkod-fetch/1.0 (contact: yourapp@example.com)"
};

async function fetchOnce() {
  const u = new URL(ENDPOINT);
  u.searchParams.set("query", SPARQL);
  const res = await fetch(u, { headers: HEADERS });
  const text = await res.text();
  if (!res.ok) {
    throw new Error(`HTTP ${res.status} ${res.statusText}: ${text.slice(0,200)}`);
  }
  try {
    return JSON.parse(text);
  } catch (e) {
    throw new Error(`Non-JSON from Wikidata: ${text.slice(0,120)}`);
  }
}

async function main() {
  let json = null;
  let attempt = 0;
  const maxAttempts = 8;
  while (attempt < maxAttempts) {
    attempt++;
    try {
      json = await fetchOnce();
      break;
    } catch (e) {
      const delay = Math.min(30000, 1000 * Math.pow(2, attempt)); // 2s..30s
      console.error(`Attempt ${attempt}/${maxAttempts} failed: ${e.message}. Retrying in ${Math.round(delay/1000)}sâ€¦`);
      await new Promise(r => setTimeout(r, delay));
    }
  }
  if (!json) throw new Error("No response JSON after retries.");

  const rows = json?.results?.bindings || [];
  console.log(`Fetched ${rows.length} rows from Wikidata`);
  if (!Array.isArray(rows) || rows.length < 200) {
    throw new Error(`Unexpected result size: ${rows.length}. Wikidata may be throttling; try again later or switch network.`);
  }

  const items = rows.map(r => {
    const code = (r.code?.value || "").toString().trim().padStart(4, "0");
    const name_sv = (r.name_sv?.value || "").trim();
    const name_en = ((r.name_en?.value || "").trim()) || name_sv;
    return { code, name_sv, name_en };
  });

  // unique & sort
  const seen = new Set();
  const unique = items.filter(it => !seen.has(it.code) && seen.add(it.code));
  unique.sort((a, b) => a.code.localeCompare(b.code, "sv"));

  const outDir = path.resolve("data");
  const outFile = path.join(outDir, "kommuner.ts");
  await fs.promises.mkdir(outDir, { recursive: true });

  const ts = `// Auto-generated by fetch-kommuner-wikidata.cjs
export const KOMMUNER = [
${unique.map(it => `  { code: "${it.code}", name_sv: ${JSON.stringify(it.name_sv)}, name_en: ${JSON.stringify(it.name_en)} }`).join(",\n")}
] as const;

export type Kommun = typeof KOMMUNER[number];
`;

  await fs.promises.writeFile(outFile, ts, "utf8");
  console.log(`Wrote ${unique.length} kommuner -> ${outFile}`);
}

main().catch(err => { console.error("Failed:", err.message); process.exit(1); });
